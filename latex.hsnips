# Нужно поменять langChanger, если смена раскладки назначана не на CapsLock, а на Shift + Alt
# const langChanger = require("child_process").spawn("powershell", ["$wshell = New-Object -ComObject wscript.shell;while($true){$in = Read-Host;if($in -eq \"\"){break;}$wshell.SendKeys('%+');}"]);
global
var changeLangInMath = true;
const langChanger = require("child_process").spawn("powershell", ["$wshell = New-Object -ComObject wscript.shell;while($true){$in = Read-Host;if($in -eq \"\"){break;}$wshell.SendKeys('{CAPSLOCK}');}"]);
function math(context) {
    return context.scopes.some(s => s.startsWith("meta.math"));
}
endglobal

# AUTO SNIPPETS

snippet `\\\(\s$` "Change language when inside inline math" A
``
    if (changeLangInMath) {
        langChanger.stdin.write("1\n")
    }
    rv = "\\( "
``
endsnippet

snippet `\\\[\s$` "Change language when inside displaystyle math" A
``
    if (changeLangInMath) {
        langChanger.stdin.write("1\n")
    }
    rv = "\\[ "
``
endsnippet

snippet `\\\)[ ,.]$` "Change language when end inline math" A
``
    if (changeLangInMath) {
        langChanger.stdin.write("1\n")
    }
    rv = m[0]
``
endsnippet

snippet `\\\][ ,.]$` "Change language when end displaystyle math" A
``
    if (changeLangInMath) {
        langChanger.stdin.write("1\n")
    }
    rv = m[0]
``
endsnippet

snippet mk "Math inline start" A
\($1\)$0
endsnippet

snippet ьл "Math inline start" A
\($1\)$0
endsnippet

snippet md "Math displaystyle start" A
\[$1\]$0
endsnippet

snippet ьв "Math displaystyle start" A
\[$1\]$0
endsnippet

# TAB SNIPPETS

snippet \switchlangmath "Switch lang in math mode"
``
    changeLangInMath = !changeLangInMath
``
endsnippet

snippet img "Start drawing image"
``    
    require("child_process").exec("mspaint");
``\includegraphics[width=0.5\linewidth]{
endsnippet

snippet `\\` "Empty line"

 

endsnippet

# SNIPPETS ENABLED IN MATH MODE

## SNIPPETS REQUIRING SPACES

context math(context)
snippet ` <> ` "approx" A
 \approx 
endsnippet

context math(context)
snippet ` <= ` "leq" A
 \leq 
endsnippet

context math(context)
snippet ` >= ` "geq" A
 \geq 
endsnippet

context math(context)
snippet ` != ` "neq" A
 \neq 
endsnippet

context math(context)
snippet `\s\s$` "Space limit" A
 
endsnippet

context math(context)
snippet ` cd ` "Cdot" A
 \cdot 
endsnippet

context math(context)
snippet ` in ` "In" A
 \in 
endsnippet

context math(context)
snippet ` to ` "To" A
 \to 
endsnippet

context math(context)
snippet ` ra ` "Right arrow" A
 \longrightarrow 
endsnippet

context math(context)
snippet ` la ` "Left arrow" A
 \longrightarrow 
endsnippet

context math(context)
snippet ` lra ` "Left right arrow" A
 \longleftrightarrow 
endsnippet

context math(context)
snippet ` ri ` "Right implies" A
 \Longrightarrow 
endsnippet

context math(context)
snippet ` li ` "Left implies" A
 \Longleftarrow 
endsnippet

context math(context)
snippet ` lri ` "Left right implies" A
 \Longleftrightarrow 
endsnippet

context math(context)
snippet ` le ` "Let" A
 \sqsupset\;
endsnippet

context math(context)
snippet ` fa ` "Forall" A
 \forall\;
endsnippet

context math(context)
snippet ` ex ` "Exists" A
 \exists\;
endsnippet

context math(context)
snippet ` lo ` "Look" A
 \measuredangle\;
endsnippet

context math(context)
snippet ` sb ` "Subset" A
 \subset 
endsnippet

context math(context)
snippet ` sp ` "Supset" A
 \supset 
endsnippet

context math(context)
snippet ` bs ` "Backslash" A
 \backslash 
endsnippet

context math(context)
snippet ` uu ` "Cup" A
 \cup 
endsnippet

context math(context)
snippet ` aa ` "Cap" A
 \cap 
endsnippet

### SNIPPETS WITH INDICES

context math(context)
snippet ` bu ` "Big cup" A
 \bigcup\limits_{ $1}^{ $2} $0
endsnippet

context math(context)
snippet ` ba ` "Big cap" A
 \bigcap\limits_{ $1}^{ $2} $0
endsnippet

context math(context)
snippet ` sum ` "Sum" A
 \sum\limits_{ ${1:i=1}^{ ${2:n}} $0
endsnippet

context math(context)
snippet ` int ` "Integral" A
 \int\limits_{ $1}^{ $2} $0
endsnippet

context math(context)
snippet ` oint ` "Contour integral" A
 \oint\limits_{ $1}^{ $2} $0
endsnippet

context math(context)
snippet ` iint ` "Double integral" A
 \iint\limits_{ $1}^{ $2} $0 
endsnippet

context math(context)
snippet ` lim ` "Limit" A
 \lim\limits_{ $1} $0
endsnippet

context math(context)
snippet ` max ` "Max" A
 \max\limits_{ $1} $0
endsnippet

context math(context)
snippet ` min ` "Min" A
 \min\limits_{ $1} $0
endsnippet

### EXCEPTIONS

context math(context)
snippet cas "cases" A
\begin{cases}
    $1
\end{cases}$0
endsnippet

context math(context)
snippet vma "vmatrix" A
\begin{vmatrix}
    $1
\end{vmatrix}$0
endsnippet

context math(context)
snippet pma "pmatrix" A
\begin{pmatrix}
    $1
\end{pmatrix}$0
endsnippet

context math(context)
snippet rt "Root" A
{\sqrt$1{ $2}}$0
endsnippet

context math(context)
snippet tx "Text inside math" A
\text{$1}$0
endsnippet

context math(context)
snippet nl "New line" A
``
    rv = "\\\\\\\n"
``
endsnippet

## VARS

context math(context)
snippet Gv "Big gamma" A
\Gamma
endsnippet

context math(context)
snippet gv "gamma" A
\gamma
endsnippet

context math(context)
snippet Dv "Big delta" A
\Delta
endsnippet

context math(context)
snippet cv "Chi" A
\chi
endsnippet

context math(context)
snippet xv "Xi" A
\xi
endsnippet

context math(context)
snippet dv "Delta" A
\delta
endsnippet

context math(context)
snippet ov "Omega" A
\omega
endsnippet

context math(context)
snippet sv "Sigma" A
\sigma
endsnippet

context math(context)
snippet lv "Lambda" A
\lambda
endsnippet

context math(context)
snippet ev "Epsilon" A
\varepsilon
endsnippet

context math(context)
snippet fv "Phi" A
\varphi
endsnippet

context math(context)
snippet av "Alpha" A
\alpha
endsnippet

context math(context)
snippet bv "Beta" A
\beta
endsnippet

context math(context)
snippet rv "Rho" A
\rho
endsnippet

## SNIPPETS APPLIED RIGHT AFTER (ALSO AFTER SPACES IN SOME CASES)

context math(context)
snippet `ss$` "Space" A
\;
endsnippet

context math(context)
snippet `([^\,\.\s]+)\.` "High index" A
``rv = m[1]``^{ $1}$0
endsnippet

context math(context)
snippet `([^\,\.\s]+)\,` "Low index" A
``rv = m[1]``_{ $1}$0
endsnippet

context math(context)
snippet `(\S+)ol` "Overline" A
\overline{``rv = m[1]``}
endsnippet

context math(context)
snippet `(\S+)ul` "Underline" A
\underline{``rv = m[1]``}
endsnippet

context math(context)
snippet `((\S*)[^c\s])os` "Overset" A
\overset{ $1}{``rv = m[1]``}$0
endsnippet

context math(context)
snippet `(\S+)us` "Underset" A
\underset{ $1}{``rv = m[1]``}$0
endsnippet

context math(context)
snippet `(.+)\/` "Fraction" A
``
    let str = m[1];
    let lastIndex = str.length - 1;
    let depth = 0;
    let i = lastIndex;
    for (i; i >= 0; i--) {
        if (str[i] == '}') depth += 1;
        if (str[i] == '{') depth -= 1;
        if ((depth < 0) || (depth == 0 && str[i] == ' ')) break;
    }
    i++;
    let over = str.slice(i);
    if (over.slice(0, 1) == "{" 
    && over.slice(-1) == "}" 
    && depth == 0) {
        over = over.slice(1,over.length - 1);    
    }
    rv = str.slice(0, i) + "\\frac{ " + over + "}";
``{ $1}$0
endsnippet

context math(context)
snippet `\\dfrac{(.*)}{(.*)}s` "Change to simple fraction" A
``
    let str = m[0];
    let res = str;
    let lastIndex = str.length - 1;
    let depth = 0;
    let brackets_count = 0;
    let first_in_brackets = "";
    let second_in_brackets = "";
    let end_of_second_index = lastIndex;
    let i = lastIndex;
    for (i; i >= 0; i--) {
        if (str[i] == '}') depth += 1;
        if (str[i] == '{') depth -= 1;
        if (depth < 0) break;
        if (depth == 0 && str[i] == '{') {
            brackets_count++;
            if (brackets_count == 1) {
                first_in_brackets = str.slice(i + 1, lastIndex - 1);
                end_of_second_index = i - 1;
            }
            if (brackets_count == 2) second_in_brackets = str.slice(i + 1, end_of_second_index);
        }
        if (brackets_count == 2) {
            if (str.slice(i - 6, i) == "\\dfrac") res = str.slice(0, i - 6) + "\\frac{" + second_in_brackets + "}{" + first_in_brackets + "}";
            break;
        }
    }
    rv = res;
``
endsnippet

context math(context)
snippet `\\frac{(.*)}{(.*)}d` "Change to displaystyle fraction" A
``
    let str = m[0];
    let res = str;
    let lastIndex = str.length - 1;
    let depth = 0;
    let brackets_count = 0;
    let first_in_brackets = "";
    let second_in_brackets = "";
    let end_of_second_index = lastIndex;
    let i = lastIndex;
    for (i; i >= 0; i--) {
        if (str[i] == '}') depth += 1;
        if (str[i] == '{') depth -= 1;
        if (depth < 0) break;
        if (depth == 0 && str[i] == '{') {
            brackets_count++;
            if (brackets_count == 1) {
                first_in_brackets = str.slice(i + 1, lastIndex - 1);
                end_of_second_index = i - 1;
            }
            if (brackets_count == 2) second_in_brackets = str.slice(i + 1, end_of_second_index);
        }
        if (brackets_count == 2) {
            if (str.slice(i - 5, i) == "\\frac") res = str.slice(0, i - 5) + "\\dfrac{" + second_in_brackets + "}{" + first_in_brackets + "}";
            break;
        }
    }
    rv = res;
``
endsnippet

context math(context)
snippet `(.)ml` "Brackets (start with left)" A
``
    rv = m[1]
``\left( $1\right)$0
endsnippet

context math(context)
snippet `(.)}` "Curly brackets" A
``
    rv = m[1]
``\left\{ $1\right\\}$0
endsnippet

context math(context)
snippet `(.)\]` "Norm" A
``
    rv = m[1]
``\left\| $1\right\|$0
endsnippet

context math(context)
snippet `(.)\|` "Abs" A
``
    rv = m[1]
``\left| $1\right|$0
endsnippet

context math(context)
snippet `(.*[^\\\s])dd` "Derivative" A
``
    let str = m[1];
    let lastIndex = str.length - 1;
    let depth = 0;
    let i = lastIndex;
    for (i; i >= 0; i--) {
        if (str[i] == '}') depth += 1;
        if (str[i] == '{') depth -= 1;
        if ((depth < 0) || (depth == 0 && str[i] == ' ')) break;
    }
    i++;
    let over = str.slice(i);
    if (over.slice(0, 1) == "{" 
    && over.slice(-1) == "}" 
    && depth == 0) {
        over = over.slice(1,over.length - 1);    
    }
    rv = str.slice(0, i) + "\\frac{ d " + over + "}";
``{ d $1}$0
endsnippet

context math(context)
snippet `\\frac{ d (\S+)}{ d (\S+)\^` "Derivative with the power" A
\frac{ d^{$1} ``rv = m[1] + "}{ d " + m[2]``^{$1}
endsnippet

### Partial need to be in the end
context math(context)
snippet `(.*[^\\\s])pp` "Partial" A
``
    let str = m[1];
    let lastIndex = str.length - 1;
    let depth = 0;
    let i = lastIndex;
    for (i; i >= 0; i--) {
        if (str[i] == '}') depth += 1;
        if (str[i] == '{') depth -= 1;
        if ((depth < 0) || (depth == 0 && str[i] == ' ')) break;
    }
    i++;
    let over = str.slice(i);
    if (over.slice(0, 1) == "{" 
    && over.slice(-1) == "}" 
    && depth == 0) {
        over = over.slice(1,over.length - 1);    
    }
    rv = str.slice(0, i) + "\\frac{ \\partial " + over + "}";
``{ \partial $1}$0
endsnippet

context math(context)
snippet `\\frac{ \\partial (\S+)}{ \\partial (\S+)\^` "Partial with the power" A
\frac{ \partial^{$1} ``rv = m[1] + "}{ \\partial " + m[2]``^{$1}
endsnippet